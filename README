I) The application is much more easier to use for unix users with the Make tool : the whole building process is performed by the Makefile and provides a complete, ready to use executable (the gcc compiler is also required) :
	- The "Make" command produces the executable "MCDA"
	- To run the application, a numerical instance of a MCDA problem is required as parameter (some instances are stored into the directory ./data/ ).
		eg : ./MCDA ./data/data1 , to apply PROMETHEE on the numerical instance given by data1 file into the directory data/

For windows users one solution is to rebuild completely from the sources or use the mingw (http://www.mingw.org/) tool that provides all the necessary requirements (however the gcc compiler still needs to be installed).

			
II) The format of the numerical instance is as follows :

_ 1st line : M K N : M is the number of "experts", K the number of criteria and N the number of actions/alternatives.

_ K next lines : for each criterion, the thresholds q and p of the preferences sets.

_ (K+1)th line : K floats : the weights of the criteria (K floats or integers).

_ Remaining lines : In M groups of K+1 lines :
	* the first line gives the weight of the expert
	* the K next lines denote the score of the alternatives (actions, projects, etc.) on each criterion.

eg. :
2 2 3
1 2
2 3
1 1 1
3
4 5 5
5 6 7
3
1 2 3
4 6 7

(1st line) This instance illustrates a 2-criteria (2nd value) Problem where 3 projects (3rd value) are evaluated by 2 experts (1st value).
(2nd line) The 1st criterion has the indifference and preference thresholds values of respectively 1 and 2.
(3rd line) The 2nd criterion has the threshold values of 2 and 3.
(4th line) The weights of the criteria : 1 1 1 (all equals).
(5th line) The 1st expert has a weight of 3
(6th and 7th line) the 3 projects (a, b, c) are evaluated by the first expert as follows :
				a	|	b	|	c
	on 1st criteria : 	4	|	5	|	5
	on 2nd criteria :	5	|	6	|	7
(Next 2+1 lines) same for the 2nd expert.


III) The provided outputs are :
	- For each expert and
		-- for each criterion : the preference function (level criterion),
		-- the multicriteria preference indices,
		-- the flows,
		-- the binary preference relations :
			** X elements of the format (a,b,c), where a and b are the projects and c is the value of the binary relation :
				=> 3 for the preference relation : (a,b,3) a is preferred to b
				=> 2 for the indifference relation : (a,b,2) a and b are indifferent ((b,a,2) should be too into the preference relation set.)
				=> 1 for the incomparability relation : (a,b,1) a and b are incomparable ((b,a,1) should be too into the preference relation set.)
	- In case of a :
		-- Partial preorder (PROMETHEE I) : the weighted aggregation of the overall binary preference relations.
		-- Complete preorder (PROMETHEE II) : The complete ranking for each expert and the sum of ranks over all the experts (the ranking over all the experts can then be done by a ranking from the lowest sum value to the highest.)


IV) We have tried to provide concise comments in the sources, directory ./srcs/ and ./heads/ .


