
#include <stdlib.h>
#include <stdio.h>

/**
#define M 6//Number of "experts"
#define K 3//Number of criteria
#define N 4//Number of alternatives/actions
**/

// Parameters : M "experts", K criteria, N alternatives/actions
int M=0, K=0, N=0;

// the in_out_flow array is a 3,N matrix, with the :
// 		- first line ( [0][i] | i in 1,..,N ) containing the outranking flow of i,
// 		- 2nd ( [1][i] | i in 1,..,N ) containing the outranked flow of i,
//		- 3rd ( [2][i] | i in 1,..,N ) containing the net flow of i.

typedef struct expert
{
	// for each criteria i in 1 to M , the score given by the expert for the action j in 1 to N
	int** scores;
}expert;

typedef expert* data;// "data" is the set of M "opinions"


/** Read formatted instances
 **/
data read_data(char** argv);

/** 
 **/
float** compute_pref_indices(const data& E);

/** Given the matrix of preference indices, fills
 *  Note : dimensions are : in_out_flow[3][N], pref_inds[N][N]
 **/
float** compute_phi(const float** pref_inds);

/** Return a table of relations 
 * 0 is NA, 1 is R or incomparable, 2 is I or indifference, 3 is the graal P or Preference relation
 * Note : dimensions : in_out_flow[2][N]
 **/
unsigned int** PROM_1(const float** in_out_flow);

