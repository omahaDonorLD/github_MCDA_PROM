

**
The application is much more easier to compile with the Make tool. The Make tool does the whole building process and provides a complete, ready to use executable (a gcc compiler is also required).

For users with no "make" tool available, a solution could be to rebuild completely from the sources, or for windows users, install the mingw and msys (http://www.mingw.org/) tools that provide all the necessary (the make tool and a gcc compiler).


The general procedure to make the application work is the following :
	1) The "Make" command produces the executable "MCDA",
	2) to run the application, an MCDA problem numerical instance and other parameters are required. With the executable, the overall number of parameters is at least 5 and at most 6 : The executable in position 1 and 4 or 5 other parameters : 
		a) 4 parameters :
			* a digit in 2nd position, that tells the application to use PROMETHEE with a preference function with a level criterion (digit 0) or a linear criterion (1).
			* at 3rd position also a digit set to 0 when PROMETHEE is to be used with the usual deterministic method and 1 if the stochastic version is preferred. Note that for the stochastic version, the joint distribution is not known.
			* Next, a digit says whether to perform a partial ranking (PROMETHEE I) (digit 0), or a complete ranking (PROMETHEE II) (digit 1).
			* The 5th argument gives the required values for the problem (the instance). This instance is either stochastic or deterministic.
			eg: to run PROMETHEE on a deterministic MCDA problem given by file "data1" (directory "data", assuming one is positionned into "repos_git" repository) :
				./MCDA 0 0 0 data/data1
		b) 5 parameters : in this case, a flowsort method is applied, and the 6th provided argument gives the reference profiles.
			eg : ./MCDA 0 0 0 data/data2 data/data2_reference_profiles
				the file "data2_reference_profiles" contains the reference profiles of the MCDA problem instance "data2".

Several instances are present in directory "data".


**
To know the required formatting of MCDA problems instances, see README_INPUT

**
To know the required formatting of results generated by the application	, see README_OUTPUT

**
For further explanations on how the application works, we tried to provide concise comments in the sources : directories ./srcs/ and ./heads/
